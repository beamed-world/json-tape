module Options
  ( Mode(..)
  , Options(..)
  , parseArgs
  , usage
  , versionInfo)
  where

import Data.Monoid ((<>))
import System.Console.GetOpt
       (ArgOrder(Permute), ArgDescr(NoArg), OptDescr(Option), getOpt, usageInfo)

-- | The mode the utility will run in.
data Mode
    = Normal
    | Version
    | Help
     deriving (Show)

data Options = Options
    { optMode :: Mode -- ^ Which mode will the utility run in?
    , optForce :: Bool -- ^ Can the destination be overwritten?
    } deriving (Show)

defaultOptions :: Options
defaultOptions =
    Options
    { optMode = Normal
    , optForce = False
    }

-- | Description of CLI options for GetOpt.
options :: [OptDescr (Options -> Either String Options)]
options =
    [ Option [] ["help"] (NoArg help) "Print this usage page and exit."
    , Option [] ["version"] (NoArg version) "Print version info and exit."
    , Option ['f'] ["force"] (NoArg force) "Force write if destination exists."]
  where
    help opts =
        Right opts { optMode = Help }
    version opts@Options {optMode = Normal} =
        Right opts { optMode = Version }
    version opts = Right opts
    force opts =
        Right opts { optForce = True }

-- | Build configuration from the argument list.
parseArgs :: [String] -> Either String (Options, [String])
parseArgs argv =
    case getOpt Permute options argv of
        (o, n, []) ->
            case foldl (>>=) (return defaultOptions) o of
                Right o' -> Right (o', n)
                Left err -> Left err
        (_, _, errs) -> Left $ concat errs <> usage

-- | Usage information generated by GetOpt.
usage :: String
usage = usageInfo header options
  where
    header = "Usage: json-tape [OPTIONS...] files..."

versionInfo :: String
versionInfo = "json-tape version 1.0.0"
